I"7<p>이번 포스팅은 타입스크립트에 대해 알아보고 기초 문법들을 살펴보겠습니다.</p>

<h3>타입스크립트를 왜 쓸까?</h3>

<p>에러를 방지하기 위해 많은 단위 테스트들이 필요하지만,</p>

<p>타입스크립트를 통해 이런 오류들에 대해 선언과 동시에 예방? 할 수 있고,</p>

<p>타입스크립트 컴파일러에 의해 코드 오타, 타입에러 등 컴파일 타임에 모든 유형 오류를 알려주기 때문에</p>

<p>코딩과 동시에 에러를 잡을 수 있어 코드품질 향상을 도와줄 수 있다.</p>

<hr />

<h3>타입스크립트 환경 구성하기</h3>

<p>타입스크립트 설치</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  $ yarn global add typescript 또는
  $ npm install -g typescript
</code></pre></div></div>

<p>그 다음, 아래 명령어를 입력하면 타입스크립트 설정파일인 (tsconfig.json) 파일이 생성됩니다.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  $ tsc --init
</code></pre></div></div>

<p>그럼 설정파일을 살펴 볼까요?</p>

<p>/tsconfig.json</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>{
  "compilerOptions": {
    "target": "es5",
    "module": "commonjs",
    "strict": true,
    "esModuleInterop": true
  }
}
</code></pre></div></div>

<ul>
  <li>target : 컴파일된 코드가 실행될 환경을 설정</li>
  <li>module : 컴파일된 코드가 사용할 모듈 시스템을 설정</li>
  <li>strict : 모든 타입을 체크할 것인지 예(true), 아니오(false)</li>
  <li>esModuleInterop : commonjs 모듈 형태로 이루어진 파일을 ES2015 모듈 형태로 불러올 수 있도록 할것인지 예(true), 아니오(false)</li>
</ul>

:ET