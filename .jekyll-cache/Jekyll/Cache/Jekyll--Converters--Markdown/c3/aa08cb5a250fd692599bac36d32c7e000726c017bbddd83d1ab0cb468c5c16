I"f<p>Ajax 비동기통신을 사용해 엑셀파일업로드 후 Controller에서 엑셀데이터를 파싱해보자</p>

<p>업로드가 필요한 페이지 html파일에 아래와 같이 Form과 Input[type=file]을 만들어 줍니다.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;form id="uploadFrm" enctype="multipart/form-data"&gt;
  &lt;p&gt;데이터 업로드&lt;br&gt;엑셀파일만 업로드 가능(xls, xlsx)&lt;/p&gt;
  &lt;input type="file" name="upFile" id="upFile" accept=".xlsx, .xls"/&gt;
&lt;/form&gt;
</code></pre></div></div>

<hr />

<p>이제 자바스크립트로 Ajax 코드블럭을 아래와 같이 생성해줍니다.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;script&gt;
let upFile = $('#upFile')[0];
upFile.addEventListener('change', function() {
    let form = $('#uploadFrm')[0];
    let frmData = new FormData(form);

    $.ajax({
        enctype: 'multipart/form-data',
        type: 'POST',
        url: CONTEXTROOT + '컨트롤러 RequestMapping URL',
        processData: false,   
        contentType: false,
        cache: false,
        data: frmData,
        success: function(data) {
            console.log(data);
        },
        error: function(e) {
            console.log(e);
            alert('파일업로드 실패');
        }
    });
});
&lt;/script&gt;
</code></pre></div></div>

<p>프로젝트 Maven pom.xml 에 아래와 같이</p>

<p>poi 라이브러리 및 파일 업로드 처리를 위한 라이브러리를 추가해줍니다.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;dependencies&gt;
  &lt;!-- 엑셀데이터 파싱을 위한 라이브러리 --&gt;
  &lt;dependency&gt;
    &lt;groupId&gt;org.apache.poi&lt;/groupId&gt;
    &lt;artifactId&gt;poi-ooxml&lt;/artifactId&gt;
    &lt;version&gt;3.17&lt;/version&gt;
  &lt;/dependency&gt;

  &lt;!-- 파일업로드 처리를 위한 라이브러리 --&gt;
  &lt;dependency&gt;
    &lt;groupId&gt;commons-fileupload&lt;/groupId&gt;
    &lt;artifactId&gt;commons-fileupload&lt;/artifactId&gt;
    &lt;version&gt;1.3.2&lt;/version&gt;
  &lt;/dependency&gt;
&lt;/dependencies&gt;
</code></pre></div></div>

<hr />

<p>이제 컨트롤러로 넘어옵시다.</p>

<p>아래 소스는 파일업로드 처리 -&gt; 업로드 한 파일을 Poi 라이브러리로 파싱합니다.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>@SuppressWarnings("resource")
@RequestMapping(value ="/insertUploadFile.do", method=RequestMethod.POST)
public String insertUploadFile(MultipartHttpServletRequest request) throws Exception {
  
  try {
    // 파일 읽어들이기
    MultipartFile file = null;
    Iterator&lt;String&gt; mIterator = request.getFileNames();
    if(mIterator.hasNext()) {
      file = request.getFile(mIterator.next());
    }

    // 엑셀파일 열기 (엑셀버전 2007 이상일때, 오픈방법)
    OPCPackage opcPackage = OPCPackage.open(file.getInputStream());
    XSSFWorkbook wb = new XSSFWorkbook(opcPackage);

    // Sheet 수
    int sheetNum = wb.getNumberOfSheets();

    // Sheet 수만큼 Loop
    for(int num = 0; num&lt;sheetNum; num++) {

      XSSFSheet sheet = wb.getSheetAt(num);
      Iterator&lt;Row&gt; iterator = sheet.iterator();

      // Row
      while(iterator.hasNext()) {
        Row currentRow = iterator.next();
      	Iterator&lt;Cell&gt; cellIterator = currentRow.iterator();
        
        // Cell
        while(cellIterator.hasNext()) {
      		Cell currentCell = cellIterator.next();
			
            /*
            	poi라이브러리에서 Cell안에 데이터를 꺼내기 위해서
                셀타입에 따라 접근연산자(.)로 꺼내는 메소드가 달라지기 때문에
                셀타입을 비교 후 셀데이터를 추출합니다.
            */
            if(currentCell.getCellTypeEnum() == CellType.STRING) {
            	System.out.print(currentCell.getStringCellValue() + "\t");
            } else if (currentCell.getCellTypeEnum() == CellType.NUMERIC) {
            	System.out.print((int)currentCell.getNumericCellValue() + "\t");
            }
      	}
      	System.out.println(); // Row를 구분해주기 위한 엔터
      }
	}
  } catch (Exception e) {
    e.printStackTrace();
  }
  return "";
}
</code></pre></div></div>

<p><img src="/assets/191118/1.png" /></p>
:ET